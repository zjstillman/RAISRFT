np.lstsq for replacing cgls
use matplotlib
plt.figure(), plt.imshow(abs(im), cmap='gray'), plt.show()

plot distribution of hashkey
9 filters, one for each location of fourier

Train on several images, test, find minimal
numba, make code faster
strength with normalization
calculate distance between test and result
structure tensor for computing angles

larger sets
train on differrent 3d object
pixel type with other hash
spread out set to train
Try without normalization
Try dividing by mean for each pach filter

Try just cropping fourier
crop and zero padding for regular images/knee images crop a square shape (2/3) and a circle masking (again 2/3)
test for knee images
upscalling by 1.5 (knees)
Bicubic upscalling

imagenet train on regular images, test on mri
try adjusting crop factor to 1/2
try normalizing over patch filter (sum all values in filter, divide by 1)
try absolute value before filter calculations

visualize different filters
imagenet testing
bugfix weird pixels in zero version
sanity check for training, total mean sq error should go down
	run test on each image in train and find total mse
try adjusting patchsize
play around with some variables to get improvements
work on unit tests
email mikki aboout summer plans cc frank

consider removing pixeltype for zeropadding